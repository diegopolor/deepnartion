{"version":3,"sources":["components/Header/ContentHeader.tsx","images/Asset2.png","components/Header/index.tsx","components/FocusTextColor/index.tsx","components/AppTXT/NTFtxt.tsx","components/NFT/DescriptionNFT.tsx","images/nft/3.png","components/BTNMint/MintCountdown.tsx","components/BTNMint/MintButton.tsx","components/BTNMint/Home.tsx","components/BTNMint/index.tsx","components/NFT/MINT.tsx","components/NFT/index.tsx","components/AppTXT/WhatSpecialTXT.tsx","components/AppTXT/ChallengesOvercomeTXT.tsx","images/nft/1.png","components/WhoWeAre/WhoWeAreSection.tsx","components/WhoWeAre/index.tsx","images/nft/f3.jpeg","components/RoadMap/index.tsx","App.tsx","index.tsx","components/BTNMint/utils.ts","components/BTNMint/candy-machine.ts","components/BTNMint/connection.tsx"],"names":["ContentHeader","children","className","Header","src","logo","alt","FocusTextColor","NTFtxt","DescriptionNFT","RootContainer","styled","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","marginBottom","fontWeight","ItemContainer","MintCountdown","date","status","style","onComplete","renderer","days","hours","minutes","seconds","completed","Paper","elevation","CTAButton","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","maxWidth","paddingBottom","backgroundColor","Grid","container","direction","wrap","item","xs","Typography","formatNumber","asNumber","align","signTransaction","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","e","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","process","getCandyMachineId","clusterApiUrl","BTNMint","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","MINT","nftIMG","NFT","WhatSpecialTXT","ChallengesOvercomeTXT","WhoWeAreSection","textComponent","imagePosition","img","altImg","WhoYouAre","arbolitoNFT","tvNFT","RoadMap","nft1","App","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getFreezePdaState","freezePda","getMasterEdition","getMetadata","getCandyMachineCreator","getFreezePda","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","toString","freezePdaState","freezeAta","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","blockhash","WalletNotConnectedError","unsignedTxns","getLatestBlockhash","i","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.e2e89e42.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\r\n\r\ninterface Props {\r\n    children?: ReactNode\r\n}\r\n\r\nconst ContentHeader = ({ children }: Props): JSX.Element =>(\r\n    <div className='flex flex-row justify-between items-center container m-auto'>\r\n        {children}\r\n    </div>\r\n) \r\n\r\nexport default ContentHeader\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/Asset2.f1baed9a.png\";","import ContentHeader from './ContentHeader'\r\nimport logo from '../../images/Asset2.png';\r\n\r\nconst Header = ()=> {\r\n    return(\r\n        <header className='sticky z-50 top-0 bg-deltaBg p-2'>\r\n            <ContentHeader>\r\n                <img src={logo} className=\"w-48 md:w-72 \" alt='logo'/>\r\n            </ContentHeader>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { ReactNode } from 'react';\r\n\r\ninterface propsFocusColorText {\r\n    children: ReactNode\r\n}\r\n\r\nconst FocusTextColor = ({ children }: propsFocusColorText)=> (\r\n    <span className=\"text-deltaPrimaryColor\" >\r\n        { children }\r\n    </span>\r\n)\r\n\r\nexport default FocusTextColor","import FocusTextColor from \"../FocusTextColor\"\r\n\r\nconst NTFtxt = ()=> (\r\n    <p className=\"font-raleway w-10/12 font-thin text-white md:text-3xl mt-6 text-center sm:text-xs\">\r\n        We do NFT&apos;s for humans by humans, you can stake your \r\n        emotions and by helping others, your action + holding your\r\n        Deepnation <FocusTextColor>NTF</FocusTextColor> will give you rewards as new <FocusTextColor>NFT&apos;S based</FocusTextColor> in our\r\n        actions as a community and individuals, how much we meditate,\r\n        how much we help others. Helping others and staking your <FocusTextColor>NFT&apos;S </FocusTextColor> \r\n        will give you more special <FocusTextColor>NFT&apos;S</FocusTextColor>. \r\n    </p>\r\n)\r\n\r\nexport default NTFtxt","import NTFtxt from \"../AppTXT/NTFtxt\"\r\n\r\nconst DescriptionNFT = () => (\r\n    <div className=\"flex flex-col items-center\">\r\n        <h2 className=\"font-raleway text-deltaPrimaryColor md:text-3xl sm:text-xs mt-6 \" >NFT&apos;S</h2>\r\n        <NTFtxt />\r\n    </ div>\r\n)\r\n\r\nexport default DescriptionNFT\r\n","export default __webpack_public_path__ + \"static/media/3.056f93c6.png\";","import { Paper } from \"@mui/material\";\nimport Countdown from \"react-countdown\";\nimport React from \"react\";\nimport { styled } from \"@mui/system\";\n\nconst RootContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  padding: theme.spacing(0),\n  \"& > *\": {\n    margin: theme.spacing(0.4),\n    width: theme.spacing(6),\n    height: theme.spacing(6),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"#384457\",\n    color: \"white\",\n    borderRadius: 5,\n    fontSize: 10,\n  },\n}));\n\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\n  display: \"flex\",\n  margin: 0,\n  marginBottom: theme.spacing(0.5),\n  height: theme.spacing(3.5),\n  padding: theme.spacing(1),\n  flexDirection: \"column\",\n  alignContent: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  background: \"#384457\",\n  color: \"white\",\n  borderRadius: 5,\n  fontWeight: \"bold\",\n  fontSize: 18,\n}));\n\nconst ItemContainer = styled(\"span\")({\n  fontWeight: \"bold\",\n  fontSize: 18,\n});\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\n    } else {\n      return (\n        <RootContainer style={style}>\n          <Paper elevation={0}>\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </ItemContainer>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </ItemContainer>\n            <span>secs</span>\n          </Paper>\n        </RootContainer>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@mui/material/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@mui/material\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #00909e 100%, #00909e 100%) important;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; \n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar, Paper, Grid, Typography } from \"@mui/material\";\nimport Alert from \"@mui/lab/Alert\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #00909e 0%, #00909e 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const anchorWallet = useAnchorWallet();\n  const { connect, connected, publicKey, wallet } = useWallet();\n  const cluster = props.network;\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!publicKey) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet as anchor.Wallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (await getAtaForMint(mint, publicKey))[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (await getAtaForMint(mint, publicKey))[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (connected && candyMachine?.program && publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container>\n      <Container maxWidth=\"xs\">\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#151A1F\",\n            borderRadius: 6,\n          }}\n        >\n          {!connected ? (\n            <ConnectButton\n              onClick={(e) => {\n                if (\n                  wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\n                ) {\n                  connect();\n                  e.preventDefault();\n                }\n              }}\n            >\n              Connect Wallet\n            </ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                publicKey &&\n                anchorWallet?.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                      signTransaction: anchorWallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\nimport { DEFAULT_TIMEOUT } from \"./connection\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material\";\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\r\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\r\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\r\nimport {\r\n  SolletWalletAdapter,\r\n  SolletExtensionWalletAdapter,\r\n} from \"@solana/wallet-adapter-sollet\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  \"devnet\") as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst BTNMint = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      new PhantomWalletAdapter(),\r\n      new SolflareWalletAdapter({ network }),\r\n      new SlopeWalletAdapter(),\r\n      new SolletWalletAdapter({ network }),\r\n      new SolletExtensionWalletAdapter({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n              error={error}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default BTNMint;","import nftIMG from '../../images/nft/3.png'\r\nimport BTNMint from '../BTNMint';\r\n\r\nconst MINT = ()=> (\r\n    <div className='flex flex-col items-center md:w-2/5 my-20'>\r\n        <img src={nftIMG} alt='NFT' className='md:w-full w-4/5 border-2 rounded-md' />\r\n        <BTNMint />\r\n    </div>  \r\n)\r\n\r\nexport default MINT","import React from \"react\";\r\n\r\nimport DescriptionNFT from './DescriptionNFT';\r\nimport MINT from './MINT';\r\n\r\nconst NFT = ()=>{\r\n    return(\r\n        <section className=\"bg-deltaBg md:h-auto font-raleway flex flex-col items-center\">\r\n            <DescriptionNFT />\r\n            <MINT />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NFT","import FocusTextColor from \"../FocusTextColor\"\r\n\r\n\r\n\r\nconst WhatSpecialTXT  = () => (\r\n    <div className=\"font-raleway flex flex-col gap-y-5\">\r\n        <h2 className=\"font-semibold pb-5\">\r\n           What&apos;s special with\r\n           <FocusTextColor> Deep Nation NFTS</FocusTextColor>\r\n        </h2> \r\n        <p> \r\n            We are a group of humans that undoubtedly seeks awareness, what deep nation proposes is\r\n            something as old as karma, we seek with our community to support people who feel alone with\r\n            information, challenges and crypto.\r\n        </p>\r\n        <p>\r\n            We seek to help our community in the development of its well being, how do we\r\n            achieve it? Real care \r\n        </p>\r\n        <p>\r\n            fill with literature, poems and philosophy is our main challenge in a world where distance\r\n            and technology predominate\r\n        </p>\r\n        <p>\r\n            In addition to that, we will include dynamics such as\r\n            meditate2earn, crypto games including a virtual reality 3D World with it&apos;s own mental check passport.    \r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default WhatSpecialTXT","import FocusTextColor from \"../FocusTextColor\"\r\n\r\nconst ChallengesOvercomeTXT  = () => (\r\n    <div className=\"font-raleway flex flex-col gap-y-5\">\r\n        <h2 className=\"font-semibold pb-5\">\r\n           <FocusTextColor>Challenges we overcome</FocusTextColor>\r\n        </h2> \r\n        <p>          \r\n            To help each person with what takes away their sleep, to find ourselves in a positon where\r\n            there is no communication from the deeper to the heads of the project, the crypto games, the\r\n            creativity and even the future of the project is everything yes, but no forget that deep\r\n            nation is to help each other \r\n        </p>\r\n        <p>\r\n            We face the challenge of rejection, the real business\r\n            of inserting a new idea, the advantage we have is that this idea is hundreds of years old.\r\n                        \r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default ChallengesOvercomeTXT","export default __webpack_public_path__ + \"static/media/1.c4233d11.png\";","\r\nimport { ReactNode } from \"react\"\r\n\r\ninterface Props {\r\n    textComponent: ReactNode\r\n    imagePosition: 'left' | 'right',\r\n    img: string\r\n    altImg : string\r\n}\r\n\r\nconst WhoWeAreSection = ({textComponent, imagePosition, img, altImg}: Props)=>  (\r\n    <div className = {`\r\n        my-10 w-2/3 \r\n        flex \r\n        md:flex-row \r\n        flex-col\r\n        gap-x-20 \r\n        items-center \r\n        ${imagePosition == 'left' && 'md:flex-row-reverse'} \r\n    `}>\r\n        {textComponent}\r\n        <img \r\n            className=\"md:mt-0 mt-20 md:w-1/2 w-full rounded-2xl\" \r\n            src={img} \r\n            alt={altImg} \r\n        />\r\n    </div>\r\n)\r\n\r\nexport default WhoWeAreSection","import WhatSpecialTXT from \"../AppTXT/WhatSpecialTXT\"\r\nimport ChallengesOvercomeTXT from \"../AppTXT/ChallengesOvercomeTXT\"\r\nimport arbolitoNFT from '../../images/nft/1.png'\r\nimport tvNFT from '../../images/nft/3.png'\r\nimport WhoWeAreSection from \"./WhoWeAreSection\"\r\n\r\nconst WhoYouAre = ()=> (\r\n    <section className=\"md:w-11/12\tflex flex-col justify-center items-center my-20\">\r\n        <h1 className=\"font-raleway mb-5 md:mb-10 text-3xl\">\r\n            Who <span className=\"text-deltaPrimaryColor\">We Are</span>\r\n        </h1>\r\n        <WhoWeAreSection \r\n            textComponent={<WhatSpecialTXT />} \r\n            imagePosition='right'\r\n            img={arbolitoNFT}\r\n            altImg = 'arbolitoNFT' \r\n        />\r\n        <hr className=\"h-50 w-1/2 my-10\"/>\r\n        <WhoWeAreSection \r\n            textComponent={<ChallengesOvercomeTXT />} \r\n            imagePosition='left'\r\n            img={tvNFT}\r\n            altImg = 'tvNFT'\r\n        />\r\n    </section>\r\n)\r\n\r\nexport default WhoYouAre\r\n\r\n","export default __webpack_public_path__ + \"static/media/f3.0d4cf9c3.jpeg\";","import nft1 from '../../images/nft/f3.jpeg'\r\n\r\nconst RoadMap = ()=> {\r\n\r\n    return(\r\n        <section className=\"bg-deltaBg h-screen flex flex-col items-center\">\r\n            <h1 className=\"font-raleway mt-20 md:mb-10 text-3xl text-white\">\r\n                ROADMAP\r\n            </h1>\r\n            <div className='flex flex-row h-100 w-4/5 bg-deltaPrimaryColor overflow-x-scroll'>   \r\n                <img className=\"md:mt-0 mt-20 rounded-2xl\"  src={nft1} width='300px' />\r\n                <img className=\"md:mt-0 mt-20 rounded-2xl\"  src={nft1} width='300px' />\r\n                <img className=\"md:mt-0 mt-20 rounded-2xl\"  src={nft1} width='300px' />\r\n                <img className=\"md:mt-0 mt-20 rounded-2xl\"  src={nft1} width='300px' />\r\n                <img className=\"md:mt-0 mt-20 rounded-2xl\"  src={nft1} width='300px' />\r\n            </div>\r\n            \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default RoadMap","import React from 'react';\nimport './index.css'\nimport Header from './components/Header'\nimport NFT from './components/NFT';\nimport WhoYouAre from './components/WhoWeAre';\nimport RoadMap from './components/RoadMap';\n\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <NFT /> \n      <WhoYouAre />\n      <RoadMap />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nexport const getFreezePdaState = async (\n  program: anchor.Program,\n  freezePda: anchor.web3.PublicKey\n): Promise<any> => {\n  try {\n    const state: any = await program.account.freezePda.fetch(freezePda);\n    return state;\n  } catch (error) {\n    return null;\n  }\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getFreezePda = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\n  console.log(freezePda.toString());\n\n  const freezePdaState = await getFreezePdaState(\n    candyMachine.program,\n    freezePda\n  );\n\n  console.log(\"Freeze state: \");\n  console.log(freezePdaState);\n\n  if (freezePdaState != null) {\n    remainingAccounts.push({\n      pubkey: freezePda,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: userTokenAccountAddress,\n      isWritable: false,\n      isSigner: false,\n    });\n    if (candyMachine.state.tokenMint != null) {\n      const freezeAta = (\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\n      )[0];\n      remainingAccounts.push({\n        pubkey: freezeAta,\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  }\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  blockhash?: Blockhash,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!blockhash) {\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = blockhash;\n    transaction.feePayer = wallet.publicKey;\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n\n    transaction.recentBlockhash =\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n      transaction.feePayer = signers[0].publicKey;\n    } else {\n      transaction.feePayer = wallet.publicKey;\n    }\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash =\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n  if (includesFeePayer) {\n    transaction.feePayer = signers[0].publicKey;\n  } else {\n    transaction.feePayer = wallet.publicKey;\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}